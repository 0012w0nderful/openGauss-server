From 0c61cbbb0f509153bd6a07d37ba4866696e9527e Mon Sep 17 00:00:00 2001
From: chen******** <13*******7@qq.com>
Date: Fri, 18 Sep 2020 20:13:05 +0800
Subject: [PATCH] patch

---
 contrib/postgis/extension_dependency.h | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/contrib/postgis/extension_dependency.h b/contrib/postgis/extension_dependency.h
index 3f0117e..de9c443 100644
--- a/contrib/postgis/extension_dependency.h
+++ b/contrib/postgis/extension_dependency.h
@@ -1,7 +1,5 @@
 /*
- * Portions Copyright (c) 2020 Huawei Technologies Co.,Ltd.
- * Portions Copyright (c) 1996-2012, PostgreSQL Global Development Group
- * Portions Copyright (c) 1994, Regents of the University of California
+ * Copyright (c) 2020 Huawei Technologies Co.,Ltd.
  *
  * openGauss is licensed under Mulan PSL v2.
  * You can use this software according to the terms and conditions of the Mulan PSL v2.
@@ -49,7 +47,11 @@
 #include "utils/hsearch.h"
 #include "utils/palloc.h"
 #include "utils/syscache.h"
-
+#include "executor/spi.h"
+#include "executor/executor.h"
+#include "utils/builtins.h"
+#include "catalog/pg_proc.h"
+#include "funcapi.h"
 typedef int Buffer;
 typedef uint16 StrategyNumber;
 typedef int16 AttrNumber;
@@ -94,6 +96,7 @@ typedef uint16 OffsetNumber;
 typedef struct GISTPageOpaqueData GISTPageOpaqueData;
 typedef GISTPageOpaqueData* GISTPageOpaque;
 
+#if 0
 typedef struct SPITupleTable {
     MemoryContext tuptabcxt; /* memory context of result table */
     uint32 alloced;          /* of alloced vals */
@@ -101,14 +104,17 @@ typedef struct SPITupleTable {
     TupleDesc tupdesc;       /* tuple descriptor */
     HeapTuple* vals;         /* tuples */
 } SPITupleTable;
+#endif
 
 /* funcapi.h */
+#if 0
 typedef enum TypeFuncClass {
     TYPEFUNC_SCALAR,    /* scalar result type */
     TYPEFUNC_COMPOSITE, /* determinable rowtype result */
     TYPEFUNC_RECORD,    /* indeterminate rowtype result */
     TYPEFUNC_OTHER      /* bogus type, eg pseudotype */
 } TypeFuncClass;
+#endif
 
 /* nodes/execnodes.h */
 typedef struct ExprContext ExprContext;
@@ -116,13 +122,16 @@ typedef struct ExprContext ExprContext;
 typedef struct Tuplestorestate Tuplestorestate;
 
 /* nodes/execnodes.h */
+#if 0
 typedef enum {
     ExprSingleResult,   /* expression does not return a set */
     ExprMultipleResult, /* this result is an element of a set */
     ExprEndResult       /* there are no more elements in the set */
 } ExprDoneCond;
+#endif 
 
 /* nodes/execnodes.h */
+#if 0
 typedef enum {
     SFRM_ValuePerCall = 0x01,         /* one value returned per call */
     SFRM_Materialize = 0x02,          /* result set instantiated in Tuplestore */
@@ -144,10 +153,12 @@ typedef struct ReturnSetInfo {
     Tuplestorestate* setResult; /* holds the complete returned tuple set */
     TupleDesc setDesc;          /* actual descriptor for returned tuples */
 } ReturnSetInfo;
+#endif
 
 typedef PageHeaderData* PageHeader;
 
 /* funcapi.h */
+#if 0
 typedef struct AttInMetadata {
     /* full TupleDesc */
     TupleDesc tupdesc;
@@ -158,8 +169,10 @@ typedef struct AttInMetadata {
     /* array of attribute typmod */
     int32* atttypmods;
 } AttInMetadata;
+#endif
 
 /* funcapi.h */
+#if 0
 typedef struct FuncCallContext {
     /*
      * Number of times we've been called before
@@ -223,6 +236,7 @@ typedef struct FuncCallContext {
      */
     TupleDesc tuple_desc;
 } FuncCallContext;
+#endif
 
 /* windowapi.h */
 typedef struct WindowAggState WindowAggState;
@@ -274,14 +288,17 @@ typedef struct GIST_SPLITVEC {
     bool spl_rdatum_exists;  /* true, if spl_rdatum already exists. */
 } GIST_SPLITVEC;
 
+#if 0
 typedef struct ItstDisKey {
     List* superset_keys; /* list of superset keys list, several members possible */
     List* matching_keys; /* list of exact matching keys,  */
 } ItstDisKey;
+#endif
 
 /* odes/relation.h */
 typedef struct PlannerGlobal PlannerGlobal;
 
+#if 0
 typedef struct PlannerInfo {
     NodeTag type;
 
@@ -474,6 +491,7 @@ typedef struct PlannerInfo {
     bool is_under_recursive_tree;
     bool has_recursive_correlated_rte; /* true if any RTE correlated with recursive cte */
 } PlannerInfo;
+#endif
 
 /* commands/vacuum.h */
 typedef struct VacAttrStats VacAttrStats;
-- 
2.6.4.windows.1

