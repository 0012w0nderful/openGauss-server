// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_read.proto

#include "remote_read.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace gauss {
class CURequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CURequest> _instance;
} _CURequest_default_instance_;
class CUResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUResponse> _instance;
} _CUResponse_default_instance_;
class PageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PageRequest> _instance;
} _PageRequest_default_instance_;
class PageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PageResponse> _instance;
} _PageResponse_default_instance_;
}  // namespace gauss
static void InitDefaultsCURequest_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_CURequest_default_instance_;
    new (ptr) ::gauss::CURequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::CURequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CURequest_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCURequest_remote_5fread_2eproto}, {}};

static void InitDefaultsCUResponse_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_CUResponse_default_instance_;
    new (ptr) ::gauss::CUResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::CUResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUResponse_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUResponse_remote_5fread_2eproto}, {}};

static void InitDefaultsPageRequest_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_PageRequest_default_instance_;
    new (ptr) ::gauss::PageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::PageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PageRequest_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPageRequest_remote_5fread_2eproto}, {}};

static void InitDefaultsPageResponse_remote_5fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gauss::_PageResponse_default_instance_;
    new (ptr) ::gauss::PageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gauss::PageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PageResponse_remote_5fread_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPageResponse_remote_5fread_2eproto}, {}};

void InitDefaults_remote_5fread_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CURequest_remote_5fread_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUResponse_remote_5fread_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PageRequest_remote_5fread_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PageResponse_remote_5fread_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_remote_5fread_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_remote_5fread_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_remote_5fread_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_remote_5fread_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, spcnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, dbnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, relnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, bucketnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, colid_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, offset_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::CURequest, lsn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, return_code_),
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::CUResponse, cudata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, spcnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, dbnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, relnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, bucketnode_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, forknum_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, blocknum_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, blocksize_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageRequest, lsn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, return_code_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, size_),
  PROTOBUF_FIELD_OFFSET(::gauss::PageResponse, pagedata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gauss::CURequest)},
  { 13, -1, sizeof(::gauss::CUResponse)},
  { 21, -1, sizeof(::gauss::PageRequest)},
  { 34, -1, sizeof(::gauss::PageResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gauss::_CURequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gauss::_CUResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gauss::_PageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gauss::_PageResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_remote_5fread_2eproto = {
  {}, AddDescriptors_remote_5fread_2eproto, "remote_read.proto", schemas,
  file_default_instances, TableStruct_remote_5fread_2eproto::offsets,
  file_level_metadata_remote_5fread_2eproto, 4, file_level_enum_descriptors_remote_5fread_2eproto, file_level_service_descriptors_remote_5fread_2eproto,
};

const char descriptor_table_protodef_remote_5fread_2eproto[] =
  "\n\021remote_read.proto\022\005gauss\"\213\001\n\tCURequest"
  "\022\017\n\007spcnode\030\001 \001(\r\022\016\n\006dbnode\030\002 \001(\r\022\017\n\007rel"
  "node\030\003 \001(\r\022\022\n\nbucketnode\030\004 \001(\005\022\r\n\005colid\030"
  "\005 \001(\005\022\016\n\006offset\030\006 \001(\004\022\014\n\004size\030\007 \001(\005\022\013\n\003l"
  "sn\030\010 \001(\004\"\?\n\nCUResponse\022\023\n\013return_code\030\001 "
  "\001(\005\022\014\n\004size\030\002 \001(\005\022\016\n\006cudata\030\003 \001(\014\"\226\001\n\013Pa"
  "geRequest\022\017\n\007spcnode\030\001 \001(\r\022\016\n\006dbnode\030\002 \001"
  "(\r\022\017\n\007relnode\030\003 \001(\r\022\022\n\nbucketnode\030\004 \001(\005\022"
  "\017\n\007forknum\030\005 \001(\005\022\020\n\010blocknum\030\006 \001(\r\022\021\n\tbl"
  "ocksize\030\007 \001(\r\022\013\n\003lsn\030\010 \001(\004\"C\n\014PageRespon"
  "se\022\023\n\013return_code\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\022\020\n"
  "\010pagedata\030\003 \001(\0142r\n\nRemoteRead\022.\n\005GetCU\022\020"
  ".gauss.CURequest\032\021.gauss.CUResponse\"\000\0224\n"
  "\007GetPage\022\022.gauss.PageRequest\032\023.gauss.Pag"
  "eResponse\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_remote_5fread_2eproto = {
  false, InitDefaults_remote_5fread_2eproto, 
  descriptor_table_protodef_remote_5fread_2eproto,
  "remote_read.proto", &assign_descriptors_table_remote_5fread_2eproto, 579,
};

void AddDescriptors_remote_5fread_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_remote_5fread_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_5fread_2eproto = []() { AddDescriptors_remote_5fread_2eproto(); return true; }();
namespace gauss {

// ===================================================================

void CURequest::InitAsDefaultInstance() {
}
class CURequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CURequest::kSpcnodeFieldNumber;
const int CURequest::kDbnodeFieldNumber;
const int CURequest::kRelnodeFieldNumber;
const int CURequest::kBucketnodeFieldNumber;
const int CURequest::kColidFieldNumber;
const int CURequest::kOffsetFieldNumber;
const int CURequest::kSizeFieldNumber;
const int CURequest::kLsnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CURequest::CURequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.CURequest)
}
CURequest::CURequest(const CURequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spcnode_, &from.spcnode_,
    static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
  // @@protoc_insertion_point(copy_constructor:gauss.CURequest)
}

void CURequest::SharedCtor() {
  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
}

CURequest::~CURequest() {
  // @@protoc_insertion_point(destructor:gauss.CURequest)
  SharedDtor();
}

void CURequest::SharedDtor() {
}

void CURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CURequest& CURequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CURequest_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void CURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.CURequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(lsn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CURequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CURequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 spcnode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_spcnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 dbnode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dbnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 relnode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_relnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bucketnode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bucketnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 colid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_colid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 offset = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 size = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 lsn = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_lsn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CURequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gauss.CURequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 spcnode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spcnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dbnode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 relnode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bucketnode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucketnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lsn = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lsn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gauss.CURequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gauss.CURequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CURequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gauss.CURequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spcnode(), output);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbnode(), output);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relnode(), output);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bucketnode(), output);
  }

  // int32 colid = 5;
  if (this->colid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->colid(), output);
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->offset(), output);
  }

  // int32 size = 7;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->size(), output);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lsn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gauss.CURequest)
}

::google::protobuf::uint8* CURequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.CURequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spcnode(), target);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dbnode(), target);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relnode(), target);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bucketnode(), target);
  }

  // int32 colid = 5;
  if (this->colid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->colid(), target);
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->offset(), target);
  }

  // int32 size = 7;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->size(), target);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->lsn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.CURequest)
  return target;
}

size_t CURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.CURequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spcnode());
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dbnode());
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->relnode());
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bucketnode());
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // int32 colid = 5;
  if (this->colid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colid());
  }

  // int32 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lsn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CURequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.CURequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CURequest* source =
      ::google::protobuf::DynamicCastToGenerated<CURequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.CURequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.CURequest)
    MergeFrom(*source);
  }
}

void CURequest::MergeFrom(const CURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.CURequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spcnode() != 0) {
    set_spcnode(from.spcnode());
  }
  if (from.dbnode() != 0) {
    set_dbnode(from.dbnode());
  }
  if (from.relnode() != 0) {
    set_relnode(from.relnode());
  }
  if (from.bucketnode() != 0) {
    set_bucketnode(from.bucketnode());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.colid() != 0) {
    set_colid(from.colid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.lsn() != 0) {
    set_lsn(from.lsn());
  }
}

void CURequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.CURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CURequest::CopyFrom(const CURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.CURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CURequest::IsInitialized() const {
  return true;
}

void CURequest::Swap(CURequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CURequest::InternalSwap(CURequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spcnode_, other->spcnode_);
  swap(dbnode_, other->dbnode_);
  swap(relnode_, other->relnode_);
  swap(bucketnode_, other->bucketnode_);
  swap(offset_, other->offset_);
  swap(colid_, other->colid_);
  swap(size_, other->size_);
  swap(lsn_, other->lsn_);
}

::google::protobuf::Metadata CURequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fread_2eproto);
  return ::file_level_metadata_remote_5fread_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUResponse::InitAsDefaultInstance() {
}
class CUResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUResponse::kReturnCodeFieldNumber;
const int CUResponse::kSizeFieldNumber;
const int CUResponse::kCudataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUResponse::CUResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.CUResponse)
}
CUResponse::CUResponse(const CUResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cudata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cudata().size() > 0) {
    cudata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cudata_);
  }
  ::memcpy(&return_code_, &from.return_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:gauss.CUResponse)
}

void CUResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUResponse_remote_5fread_2eproto.base);
  cudata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
}

CUResponse::~CUResponse() {
  // @@protoc_insertion_point(destructor:gauss.CUResponse)
  SharedDtor();
}

void CUResponse::SharedDtor() {
  cudata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUResponse& CUResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUResponse_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void CUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.CUResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cudata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 return_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_return_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes cudata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cudata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gauss.CUResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 return_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cudata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cudata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gauss.CUResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gauss.CUResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gauss.CUResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_code(), output);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // bytes cudata = 3;
  if (this->cudata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cudata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gauss.CUResponse)
}

::google::protobuf::uint8* CUResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.CUResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_code(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // bytes cudata = 3;
  if (this->cudata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cudata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.CUResponse)
  return target;
}

size_t CUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.CUResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cudata = 3;
  if (this->cudata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cudata());
  }

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->return_code());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.CUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CUResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CUResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.CUResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.CUResponse)
    MergeFrom(*source);
  }
}

void CUResponse::MergeFrom(const CUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.CUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cudata().size() > 0) {

    cudata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cudata_);
  }
  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void CUResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.CUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUResponse::CopyFrom(const CUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.CUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUResponse::IsInitialized() const {
  return true;
}

void CUResponse::Swap(CUResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUResponse::InternalSwap(CUResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cudata_.Swap(&other->cudata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_code_, other->return_code_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata CUResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fread_2eproto);
  return ::file_level_metadata_remote_5fread_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PageRequest::InitAsDefaultInstance() {
}
class PageRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageRequest::kSpcnodeFieldNumber;
const int PageRequest::kDbnodeFieldNumber;
const int PageRequest::kRelnodeFieldNumber;
const int PageRequest::kBucketnodeFieldNumber;
const int PageRequest::kForknumFieldNumber;
const int PageRequest::kBlocknumFieldNumber;
const int PageRequest::kBlocksizeFieldNumber;
const int PageRequest::kLsnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageRequest::PageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.PageRequest)
}
PageRequest::PageRequest(const PageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spcnode_, &from.spcnode_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocksize_) -
    reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
  // @@protoc_insertion_point(copy_constructor:gauss.PageRequest)
}

void PageRequest::SharedCtor() {
  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocksize_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
}

PageRequest::~PageRequest() {
  // @@protoc_insertion_point(destructor:gauss.PageRequest)
  SharedDtor();
}

void PageRequest::SharedDtor() {
}

void PageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageRequest& PageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PageRequest_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void PageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.PageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spcnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocksize_) -
      reinterpret_cast<char*>(&spcnode_)) + sizeof(blocksize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PageRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 spcnode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_spcnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 dbnode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dbnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 relnode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_relnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bucketnode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bucketnode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 forknum = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_forknum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 blocknum = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_blocknum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 blocksize = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_blocksize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 lsn = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_lsn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gauss.PageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 spcnode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spcnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dbnode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 relnode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bucketnode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucketnode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 forknum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blocknum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blocksize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lsn = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lsn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gauss.PageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gauss.PageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gauss.PageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spcnode(), output);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbnode(), output);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relnode(), output);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bucketnode(), output);
  }

  // int32 forknum = 5;
  if (this->forknum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->forknum(), output);
  }

  // uint32 blocknum = 6;
  if (this->blocknum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blocknum(), output);
  }

  // uint32 blocksize = 7;
  if (this->blocksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->blocksize(), output);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lsn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gauss.PageRequest)
}

::google::protobuf::uint8* PageRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.PageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spcnode(), target);
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dbnode(), target);
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relnode(), target);
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bucketnode(), target);
  }

  // int32 forknum = 5;
  if (this->forknum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->forknum(), target);
  }

  // uint32 blocknum = 6;
  if (this->blocknum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blocknum(), target);
  }

  // uint32 blocksize = 7;
  if (this->blocksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->blocksize(), target);
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->lsn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.PageRequest)
  return target;
}

size_t PageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.PageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 spcnode = 1;
  if (this->spcnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spcnode());
  }

  // uint32 dbnode = 2;
  if (this->dbnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dbnode());
  }

  // uint32 relnode = 3;
  if (this->relnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->relnode());
  }

  // int32 bucketnode = 4;
  if (this->bucketnode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bucketnode());
  }

  // int32 forknum = 5;
  if (this->forknum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->forknum());
  }

  // uint32 blocknum = 6;
  if (this->blocknum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blocknum());
  }

  // uint64 lsn = 8;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lsn());
  }

  // uint32 blocksize = 7;
  if (this->blocksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blocksize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.PageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.PageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.PageRequest)
    MergeFrom(*source);
  }
}

void PageRequest::MergeFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.PageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spcnode() != 0) {
    set_spcnode(from.spcnode());
  }
  if (from.dbnode() != 0) {
    set_dbnode(from.dbnode());
  }
  if (from.relnode() != 0) {
    set_relnode(from.relnode());
  }
  if (from.bucketnode() != 0) {
    set_bucketnode(from.bucketnode());
  }
  if (from.forknum() != 0) {
    set_forknum(from.forknum());
  }
  if (from.blocknum() != 0) {
    set_blocknum(from.blocknum());
  }
  if (from.lsn() != 0) {
    set_lsn(from.lsn());
  }
  if (from.blocksize() != 0) {
    set_blocksize(from.blocksize());
  }
}

void PageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageRequest::CopyFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageRequest::IsInitialized() const {
  return true;
}

void PageRequest::Swap(PageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageRequest::InternalSwap(PageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spcnode_, other->spcnode_);
  swap(dbnode_, other->dbnode_);
  swap(relnode_, other->relnode_);
  swap(bucketnode_, other->bucketnode_);
  swap(forknum_, other->forknum_);
  swap(blocknum_, other->blocknum_);
  swap(lsn_, other->lsn_);
  swap(blocksize_, other->blocksize_);
}

::google::protobuf::Metadata PageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fread_2eproto);
  return ::file_level_metadata_remote_5fread_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PageResponse::InitAsDefaultInstance() {
}
class PageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageResponse::kReturnCodeFieldNumber;
const int PageResponse::kSizeFieldNumber;
const int PageResponse::kPagedataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageResponse::PageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gauss.PageResponse)
}
PageResponse::PageResponse(const PageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pagedata().size() > 0) {
    pagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagedata_);
  }
  ::memcpy(&return_code_, &from.return_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:gauss.PageResponse)
}

void PageResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PageResponse_remote_5fread_2eproto.base);
  pagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
}

PageResponse::~PageResponse() {
  // @@protoc_insertion_point(destructor:gauss.PageResponse)
  SharedDtor();
}

void PageResponse::SharedDtor() {
  pagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageResponse& PageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PageResponse_remote_5fread_2eproto.base);
  return *internal_default_instance();
}


void PageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gauss.PageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PageResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PageResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 return_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_return_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes pagedata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pagedata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gauss.PageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 return_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pagedata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gauss.PageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gauss.PageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gauss.PageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_code(), output);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // bytes pagedata = 3;
  if (this->pagedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pagedata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gauss.PageResponse)
}

::google::protobuf::uint8* PageResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gauss.PageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_code(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // bytes pagedata = 3;
  if (this->pagedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pagedata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gauss.PageResponse)
  return target;
}

size_t PageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gauss.PageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pagedata = 3;
  if (this->pagedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pagedata());
  }

  // int32 return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->return_code());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gauss.PageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PageResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gauss.PageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gauss.PageResponse)
    MergeFrom(*source);
  }
}

void PageResponse::MergeFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gauss.PageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pagedata().size() > 0) {

    pagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagedata_);
  }
  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void PageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gauss.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageResponse::CopyFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gauss.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageResponse::IsInitialized() const {
  return true;
}

void PageResponse::Swap(PageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageResponse::InternalSwap(PageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pagedata_.Swap(&other->pagedata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_code_, other->return_code_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata PageResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fread_2eproto);
  return ::file_level_metadata_remote_5fread_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gauss
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::gauss::CURequest* Arena::CreateMaybeMessage< ::gauss::CURequest >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::CURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::CUResponse* Arena::CreateMaybeMessage< ::gauss::CUResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::CUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::PageRequest* Arena::CreateMaybeMessage< ::gauss::PageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::PageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gauss::PageResponse* Arena::CreateMaybeMessage< ::gauss::PageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gauss::PageResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
