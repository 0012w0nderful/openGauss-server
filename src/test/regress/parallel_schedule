test: partiton_pathkey_col_plan partiton_pathkey_col_randomexec partiton_pathkey_row_plan partiton_pathkey_row_randomexec
#test the locales setting expect not affacted each other
test: pg_session_locale
# ----------
# These four each depend on the previous one(duplicate)
# duplicated create_function_1 create_type create_table copy
# ----------
test: type_sanity
#test: sanity_check
#test: opr_sanity
test: create_function_1
test: create_table
test: temp__4 copy

# ----------
# More groups of parallel tests
# duplicated create_misc
# ----------
test: hw_hashagg_start
#test: create_misc hw_hashagg_writefile hw_hashagg_expand
test: create_misc
test: create_view1 create_view2 create_view3 create_view4 create_view5 int8

#dupliacated select int8
test: select
test: misc
test: stats

#dispatch from 13
test: function
test: aggregates_part1 aggregates_part2 aggregates_part3 count_distinct_part1 count_distinct_part2 count_distinct_part3 count_distinct_part4


test: hw_dfx_thread_status

test: stable_function_shippable
# ----------
# data partition
# ----------
test: physical_slot

test: hw_smp

# test MERGE INTO

# test INSERT UPDATE
test: insert_update_001 insert_update_002 insert_update_003 insert_update_008 insert_update_009 insert_update_010
test: delete update namespace case select_having select_implicit
test: hw_test_operate_user
test: hw_createtbl_llt gsqlerr
test: hw_sql_llt sqlLLT

# all pass
# run tablespace by itself, and first, because it forces a checkpoint;
# we'd prefer not to have checkpoints later in the tests because that
# interferes with crash-recovery testing.
test: hw_alter_session
test: tablespace
test: hw_account_lock
#test: hw_user_audit

# ----------
# Another group of parallel tests
# ----------
test: hw_independent_user hw_user_basic hw_user_revoke hw_user_privilege hw_user_pguser hw_user_namespace
test: hw_interval_format hw_function_p_1 hw_function_p_2 hw_function_p_3 hw_function_p_4 hw_current_schema hw_functions
#test: hw_user_alter_pguser
test: hw_dba_enable_partition hw_tablespace
test: hw_procedure_define hw_anonymous_block hw_procedure
test: hw_grant_all hw_dynamic_sql hw_func_return_out
#test: hw_show_tabledef
test: hw_package_function

#show plan
test: plan_hint

###split from parallel_schedule4###

# ----------
# Another group of parallel tests
# ----------
# plsql_packages tests

test: hw_empty_str_to_null
#test: hw_varray hw_cursor hw_schema
test: hw_schema

test: tpchrush
test: tpch01 tpch02 tpch03 tpch04 libcomm_check_status tpch03_querymem
test: tpch05 tpch06 tpch07 tpch08
test: tpch09 tpch10 tpch11 tpch12
test: tpch13 tpch14 tpch15 tpch16
test: tpch17 tpch18 tpch19 tpch20 tpch18_querymem
test: tpch21 tpch22 tpch11_pretty_performance

#test export
test: temp__2

#test: vec_prepare -- original test
test: vec_prepare_001 vec_prepare_002
test: vec_prepare_003

#test sort optimize
test: sort_optimize_row sort_optimize_column sort_optimize_001
#test early free
test: early_free
#test for col tpch with vector engine disabled
test: tpch_disablevec01 tpch_disablevec03 tpch_disablevec04
test: tpch_disablevec05 tpch_disablevec06 tpch_disablevec07
test: tpch_disablevec08 tpch_disablevec09 tpch_disablevec12
test: tpch_disablevec13 tpch_disablevec14 tpch_disablevec16
test: tpch_disablevec18 tpch_disablevec19 tpch_disablevec21

# This test case is used to monitor CATALOG_VERSION_NO, GUC parameter information and gs_upgrade llt coverage.
# If CATALOG_VERSION_NO is changed, please inform the OM tools team, the OM tools scripts need to be modified together.
# If the GUC parameter is changed, please modify the Code/src/bin/gs_guc/cluster_guc.conf and Code/src/test/regress/output/recovery_2pc_tools.source files.
#test: recovery_2pc_tools
# ----------
# Postgres-XC additional tests
# ----------

# This was used by triggers
#test: create_function_1
test: xc_create_function
# Now xc_misc is used by xc_returning_step1 and xc_returning_step2
test: xc_misc
# This was used by select of update
#test: xc_for_update
# Those ones can be run in parallel
test: xc_groupby xc_distkey xc_having
test: hw_rewrite_lazyagg hw_light
test: xc_temp xc_remote xc_FQS hw_pbe
test: xc_FQS_join xc_copy xc_alter_table
test: xc_constraints xc_limit xc_sort
test: xc_params xc_returning_step1
test: xc_returning_step2

#test row compress
test: compress compress01 compress02 cmpr_toast_000 cmpr_toast_update cmpr_index_00 cmpr_6bytes cmpr_int cmpr_datetime cmpr_numstr cmpr_numstr01 cmpr_float cmpr_nulls_delta cmpr_nulls_prefix cmpr_copyto cmpr_mode_none00 cmpr_mode_none01 cmpr_references_00 cmpr_references_01
test: cmpr_rollback cmpr_drop_column cmpr_drop_column_01 cmpr_drop_column_02 cmpr_drop_column_03 cmpr_dead_loop_00 cmpr_timewithzone cmpr_cluster_00

# Cluster setting related test is independant


test: xc_dml
# ---------------------------
# test cases for CStore
# ---------------------------
test: hw_cstore_alter hw_cstore_alter1 cstore_alter_table cstore_alter_table1 cstore_alter_table2 cstore_alter_table3 cstore_alter_table4 cstore_alter_table5 cstore_alter_table6 cstore_alter_table7 cstore_alter_table8 cstore_alter_table9 cstore_alter_table10 hw_alter_table_instant hw_cstore_copy hw_cstore_copy1

test: hw_cstore_tablespace hw_cstore_truncate hw_cstore_update
test: hw_cstore_roughcheck
test: hw_cstore_partition_update hw_cstore_partition_update1 hw_cstore_partition_update2

#------------------------------
# CStore compression test cases
#-----------------------------
test: cstore_cmpr_delta cstore_cmpr_date cstore_cmpr_timestamp_with_timezone cstore_cmpr_time_with_timezone cstore_cmpr_delta_nbits cstore_cmpr_delta_int cstore_cmpr_str cstore_cmpr_dict_00 cstore_cmpr_rle_2byte_runs
test: cstore_cmpr_every_datatype cstore_cmpr_zlib cstore_unsupported_feature cstore_unsupported_feature1 cstore_cmpr_rle_bound cstore_cmpr_rle_bound1 cstore_nan cstore_infinity cstore_log2_error cstore_create_clause cstore_create_clause1 cstore_nulls_00 cstore_partial_cluster_info
test: cstore_replication_table_delete

test: hw_cstore_index hw_cstore_index1 hw_cstore_index2
test: hw_cstore_vacuum
test: hw_cstore_insert hw_cstore_delete hw_cstore_unsupport

# test on extended statistics
# test: multi column stats
test: hw_es_multi_column_stats_prepare
test: hw_es_multi_column_stats_1 hw_es_multi_column_stats_1_1 hw_es_multi_column_stats_1_2 hw_es_multi_column_stats_1_3 hw_es_multi_column_stats_1_4 hw_es_multi_column_stats_1_5 hw_es_multi_column_stats_1_6 hw_es_multi_column_stats_2_1 hw_es_multi_column_stats_2_2 hw_es_multi_column_stats_2_3 hw_es_multi_column_stats_3 hw_es_multi_column_stats_3_1 hw_es_multi_column_stats_3_2
test: hw_es_multi_column_stats_end

test: checksum limit1 setop setop_1 setop_2
test: distinct prepare1
test: unsupported_features statistic statistic_2
#statistic_1
#test: extendstat

test: hw_setop_writefile

test: vec_nestloop_pre vec_mergejoin_prepare vec_result vec_limit vec_mergejoin_1 vec_mergejoin_2 vec_stream
test: vec_nestloop1  vec_mergejoin_inner vec_mergejoin_left vec_mergejoin_semi vec_mergejoin_anti llvm_vecexpr1 llvm_vecexpr2 llvm_vecexpr3 llvm_vecexpr_td llvm_target_expr llvm_target_expr2 llvm_target_expr3
test: vec_nestloop_end vec_mergejoin_aggregation llvm_vecagg llvm_vecagg2 llvm_vecagg3 llvm_vechashjoin
#test:llvm_vechashjoin2
# ----------
# The first group of parallel tests
# ----------
test: boolean char name varchar text int2 int4 oid float4 float8 bit numeric numeric_2 txid uuid money

# Depends on things setup during char, varchar and text
# Depends on int2, int4, int8, float4, float8
test: strings numerology

# ----------
# The second group of parallel tests
# ----------
test: point lseg box path polygon circle date time timetz timestamp timestamptz interval abstime reltime tinterval inet macaddr tstypes comments

# ----------
# Another group of parallel tests
# geometry depends on point, lseg, box, path, polygon and circle
# horology depends on interval, timetz, timestamp, timestamptz, reltime and abstime
# ----------
test: geometry horology

# ----------
# These four each depend on the previous one(duplicate)
# ----------
#test: create_function_1
#test: create_type
#test: create_table

# ----------
# Load huge amounts of data
# We should split the data files into single files and then
# execute two copy tests parallel, to check that copy itself
# is concurrent safe.(duplicate)
# ----------
test: copyselect copy_error_log copy_eol

# ----------
# More groups of parallel tests
# ----------
#test: create_misc
# These depend on the above two
test: create_index

#this case of gin_test is dispatched, for more details u can look for schedule23
#test: gin_test

# Postgres-XC : Removed this test from the parallel group of tests since it used to give inconsistent plan outputs.
#test: inherit
# ----------
# Another group of parallel tests
# ----------
test: create_function_3 constraints vacuum drop_if_exists
#test:  create_table_like

# ----------
# sanity_check does a vacuum, affecting the sort order of SELECT *
# results. So it should not run parallel to other tests.
# ----------
#test: sanity_check

test: errors subplan_base
test: subplan_new
test: select
test: col_subplan_base_1 col_subplan_new
test: join
test: select_into select_distinct subselect_part1 subselect_part2 transactions random btree_index select_distinct_on union  gs_aggregate arrays hash_index
test: aggregates
test: portals_p2 window tsearch temp__6 holdable_cursor col_subplan_base_2

test: alter_table_000 alter_table_001 alter_table_002 alter_table_003

test: with
#test: col_subplan_extend

# run alter object to test pg_object
#test: pg_object_test
###split from parallel_schedule2###
test: hw_sec_account_lock_unlock rowlevelsecurity
test: resolve_unknown
test: query_rewrite
test: create_schema view_dump
test: hw_function_p_2 hw_function_p_3 hw_function_p_4
test: hw_function_p_1
#test: auto_analyze_test
#test: ts_gbk
#test: tablespace_limit
test: create_c_function
#test: reindex_internal
#test: query_self_tuning_pre
#test: query_self_tuning
#test: query_self_tuning_1_2
#test: query_self_tuning_1_3
#test: query_self_tuning_clean
test: cstore_replication_table_delete

test: hw_cursor_part1 hw_cursor_part2 hw_cursor_part3 hw_cursor_part4 hw_cursor_part5 hw_cursor_part6 hw_cursor_part7 hw_cursor_part8
test: vec_append_part1 vec_append_part2 vec_append_part3
test: vec_cursor_part1 vec_cursor_part2
test: vec_delete_part1 vec_delete_part2

test: alter_schema_db_rename_seq

#test: cbm_DN

test: a_outerjoin_conversion

# test on plan_table
test: plan_table04

test: setrefs
test: agg

# test sql by pass
test: bypass_simplequery_support
test: bypass_preparedexecute_support

test: string_digit_to_numeric
# Another group of parallel tests
# ----------
test: collate tablesample tablesample_1 tablesample_2

# ----------
# Another group of parallel tests
# ----------
test: hw_order


# ----------
# Database security
# ----------
test: hw_pwd_reuse
test: hw_auditadmin

test: performance_enhance
test: explain_fqs
test: explain_pbe
# temp__3 create_table copy vec_prepare_001 vec_prepare_002 vec_prepare_003 int4 int8 are duplicated
test: temp__3
#test: create_table
#test: copy
#test: int4
# ----------
# Another group of parallel tests
# NB: temp.sql does a reconnect which transiently uses 2 connections,
# so keep this parallel group to at most 19 tests
# ----------
test: plpgsql
test: plancache limit rangefuncs prepare
test: returning largeobject
test: hw_explain_pretty1 hw_explain_pretty2 hw_explain_pretty3
test: goto
test: equivalence_class
#test: tsdb_job
test: tsdb_delta2_compress
test: tsdb_xor_compress
test: tsdb_aggregate

test: readline
#test: hw_export_normal_tbl hw_export_invalid_options hw_change_passwd
test: hw_to_timestamp hw_view_privilege

test: hw_identifier
test: hw_hashint1 hw_smalldatetime_hash hw_rawtype_hash
test: hw_nvarchar2_hash cmpr_smallint cmpr_prefix_150left cmpr_uint32_oid
test: oidjoins opr_sanity_1 opr_sanity_2 regex

test: pmk
# Cluster setting related test is independant
# ----------
# Test of changed data type compatible with Oracle

test: hw_datatype hw_datatype_2 hw_datatype_3
test: test_regex llt_atc
#test: llt_coverage_atc

# ----------
# test for set operations
# ----------
#test: create_enumtype
test: enum select_nest_views
#test: vec_prepare_001 vec_prepare_002
#test: vec_prepare_003
#show plan
test: col_joinplan col_joinnew
test: col_limit col_distinct col_prepare
test: col_function_1 col_function_2 col_count_distinct_1 col_count_distinct_2 col_count_distinct_3 col_count_distinct_4
test: directory_test
#test: nodegroup_name
test: analyse_verify
test: create_compositetype
test: create_basetype
#test: add_views
test: tabletype
#test with recursive
test: recursive_ref_recursive
test: recursive_prepare
test: recursive_cte
test: recursive_cte_col
test: nohashjoin_recursive_cte
test: nohashjoin_recursive_cte_col
test: others
test: icbc_customer
test: recursive_unshippable
test: recursive_finalize
test: recursive_cte_1
test: test_relpages

test: temp__3
# create_table copy vec_prepare int4 are duplicated
#test: create_table
#test: copy
#test: vec_prepare_001 vec_prepare_002
#test: vec_prepare_003
test: vec_window_pre
test: window1 gin_test_2
test: vec_window_001 vec_window_002
test: vec_window_end vec_numeric_sop_1 vec_numeric_sop_2 vec_numeric_sop_3 vec_numeric_sop_4 vec_numeric_sop_5

#test: vec_prepare_001 vec_prepare_002
#test: vec_prepare_003
test: vec_unique_pre vec_bitmap_prepare
test: vec_unique vec_setop_001 vec_setop_002 vec_setop_003 vec_setop_004 vec_setop_005 hw_vec_int4 hw_vec_int8 hw_vec_float4 hw_vec_float8
test: hw_vec_constrainst vec_numeric vec_numeric_1 vec_numeric_2 vec_bitmap_1 vec_bitmap_2
#test: wait_status
test: disable_vector_engine
test: hybrid_row_column
#test: node_active
#test: psql
test: retry
test: hw_replication_slots
test: insert
test: copy2 temp
test: truncate
test: temp_table
#FIXME  Be sure this file is always the last test case, for node group1 has been modified.
#test: process_switch

test: b_compatibility
test: hw_compatibility
#test: hw_compatibility_source
test: hw_groupingsets hw_row_grouping_set
test: char_truncation_common char_truncation_cast

#this case is dispatched from schedule10(gin_test)
test: gin_test1 gin_test2 gin_test3

#the fallowing part is dispatched from schedule15

# FIXME: move me back to the parallel test when the refcnt issue is fixed
# Below two teste are unstable, temporarily ignoring. This is same to distribute_dattistic, relallvisible, Dongwang will solve the problem.

test: hw_expression_alias


#==========================================================================================================================================


# ----------
# src/test/regress/parallel_schedule.33
#
# By convention, we put no more than twenty tests in any one parallel group;
# this limits the number of connections needed to run the tests.
# ----------


test: udf_crem

test: create_c_function

#---1. Drop-Column test
test: cstore_drop_column cstore_drop_column_replicated

#---2. delete delta test
#  -2.1 delete delta test for row table (hash/replication)
#test: delete_delta
#test: delete_delta_row_partition

#  -2.2 delete delta test CU (hash/replication)
#test: delete_delta_cstore
#test: delete_delta_col_partition

#---3.3 test duplicate delete/update
#  -3.1 test duplicate delete/update (hash/replication for col/row table)
#test: delete_delta_dupdelete
#test: delete_delta_col_dupdelete

#  -3.2 test duplicate delete/update for partitioned (hash/replication for col/row table)
#test: delete_delta_partition_dupdelete
#test: delete_delta_col_partition_dupdelete

#---4. Unsupported statement test
#test: online_x_utility

#---5. Row table append mode test
#test: redis_append_mode
#test: redis_append_mode_replicated
#test: redis_append_mode_row_partition
#test: redis_append_mode_row_partition_replicated
#test: test_alter_table_set_refresh

#---6. Column table append mode test
#test: redis_append_mode_col
#test: redis_append_mode_col_partition
#test: redis_append_mode_col_partition_replicated


#---7. other
#test: create_redis_c_function
#test: online_expansion_misc

#---8. predicate push down to range scan in redis
#test: pre_redis_pushdown
#test: redis_pushdown_row
#test: redis_pushdown_col
#test: redis_pushdown_row_partition
#test: redis_pushdown_col_partition
#test: post_redis_pushdown

#split from parallel_schedule2

# ----------
# Advisory lock need to be tested in series in Postgres-XC
# ---------
test: advisory_lock

# ----------
# Another group of parallel tests
# ----------
test: cluster dependency guc bitmapops tsdicts functional_deps json

# test for vec sonic hash
test: vec_sonic_hashjoin_number_prepare
test: vec_sonic_hashjoin_number_nospill
#test: hw_pwd_complexity

test: timeout
test: dml
#test: iud
#test: random_plan
test: hashfilter hashfilter_1
test: reduce_orderby
test: backtrace_log
#test: global_stats
test: bulkload_start
test: bulkload_parallel_test_1 bulkload_parallel_test_2 bulkload_parallel_test_3 bulkload_parallel_test_4
#test: bulkload_end bulkload_error_tbl


#test: vec_prepare_001
#test: vec_prepare_002
#test: vec_prepare_003
test: tpchcol05 tpchcol07 tpchcol08 tpchcol09

test: tpchcol01
test: tpchcol06
test: tpchcol03 tpchcol04
test: tpchcol12 tpchcol13 tpchcol14 tpchcol16 tpchcol18 tpchcol19 tpchcol21
#test: threadpool_view

#test: vec_sort
test: vec_partition vec_partition_1 vec_material_001
#test: vec_material_002

test: llvm_vecsort llvm_vecsort2

test: udf_crem create_c_function

#test: redis_prepare_c_functions
#test: pre_redis_create_tx  pre_redis_create_cmpts
#test: redis_proc_ut1 drop_proc_ut1
#test: redis_proc_ut2 normal_IUD_proc_ut2 drop_proc_ut2
#test: redis_proc_ut3 drop_proc_ut3
#test: redis_proc_ut4 normal_IUD_proc_ut4 drop_proc_ut4
#test: post_redis_drop_cmpts
#test: normal_IUD_proc_ut9 redis_proc_ut9 drop_proc_ut9
#test: post_redis_drop_cmpts
#test: pre_redis_create_tx2
#test: pre_redis_tx_insert
#test: redis_proc_ut5 truncate_proc_ut5
#test: redis_proc_ut6 normal_IUD_proc_ut6 truncate_proc_ut6
#test: redis_proc_ut7 truncate_proc_ut7
#test: redis_proc_ut8 normal_IUD_proc_ut8 truncate_proc_ut8
#test: normal_IUD_proc_ut10 redis_proc_ut10 truncate_proc_ut10
#test: post_redis_drop_tx2
#test: redis_clean_c_functions
#test: redis_truncate
#test: redis_truncate_col
#test: redis_alter_truncate_partition
#test: redis_alter_truncate_col_partition
