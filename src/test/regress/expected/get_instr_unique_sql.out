drop table if exists unique_sql_test1;
NOTICE:  table "unique_sql_test1" does not exist, skipping
drop table if exists unique_sql_test2;
NOTICE:  table "unique_sql_test2" does not exist, skipping
create table unique_sql_test1(a int, b int);
create table unique_sql_test2(a int, b int);
insert into unique_sql_test1 select GENERATE_SERIES(0, 15000),GENERATE_SERIES(0, 15000);
insert into unique_sql_test2 select GENERATE_SERIES(0, 15000),GENERATE_SERIES(0, 15000);
select reset_unique_sql('global','ALL',0);
 reset_unique_sql 
------------------
 t
(1 row)

--explain sql won't record unique sql info
explain performance select * from unique_sql_test1 where b in (select b from unique_sql_test2) and a = 66 order by b;
--?.*
--?.*
--? Sort.*
   Output: unique_sql_test1.a, unique_sql_test1.b
   Sort Key: unique_sql_test1.b
--?   Sort Method: quicksort  Memory: .*
--?   (Buffers: .*)
--?.*
--?   ->  Hash Join  (.*)
         Output: unique_sql_test1.a, unique_sql_test1.b
         Hash Cond: (unique_sql_test1.b = unique_sql_test2.b)
--?         (Buffers: .*)
--?         (CPU: .*)
--?         ->  Seq Scan on public.unique_sql_test1  (cost=.*)
               Output: unique_sql_test1.a, unique_sql_test1.b
               Filter: (unique_sql_test1.a = 66)
--?               Rows Removed by Filter: .*
--?               (Buffers: .*)
--?               (CPU: .*)
--?         ->  Hash  (cost=.*)
               Output: unique_sql_test2.b
--?                Buckets: .*
--?               (Buffers: .*)
--?               (CPU: .*)
--?               ->  HashAggregate  (cost=.*)
                     Output: unique_sql_test2.b
                     Group By Key: unique_sql_test2.b
--?                     (Buffers: .*)
--?                     (CPU: ex .*)
--?                     ->  Seq Scan on public.unique_sql_test2  (cost=.*)
                           Output: unique_sql_test2.b
--?                           (Buffers: .*)
--?                           (CPU: .*)
--? Total runtime: .*
(32 rows)

select * from unique_sql_test1 where b in (select b from unique_sql_test2) and a = 66 order by b;
 a  | b  
----+----
 66 | 66
(1 row)

select sort_count,hash_count from get_instr_unique_sql() where query like '%select * from unique_sql_test1 where b in (select b from unique_sql_test2%';
 sort_count | hash_count 
------------+------------
          1 |          1
(1 row)

--test sort with sqlbypass
create index i_unique_sql_test1 on unique_sql_test1(a);
create index i_unique_sql_test2 on unique_sql_test2(a);
set enable_beta_opfusion = on;
set enable_bitmapscan = off;
select reset_unique_sql('global','ALL',0);
 reset_unique_sql 
------------------
 t
(1 row)

explain (costs off) select * from unique_sql_test1 where a = 66 order by b;
                          QUERY PLAN                           
---------------------------------------------------------------
 [Bypass]
 Sort
   Sort Key: b
   ->  Index Scan using i_unique_sql_test1 on unique_sql_test1
         Index Cond: (a = 66)
(5 rows)

select * from unique_sql_test1 where a = 66 order by b;
 a  | b  
----+----
 66 | 66
(1 row)

select sort_count,hash_count from get_instr_unique_sql() where query like '%select * from unique_sql_test1 where%';
 sort_count | hash_count 
------------+------------
          1 |          0
(1 row)

