create schema stats;
set current_schema=stats;
create table fetch_stat_within_new_xid(f1 int, f2 float, f3 text);
insert into fetch_stat_within_new_xid select generate_series(1,1000), 10.0, repeat('Gauss Database,Niubility!!',2);
analyze fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

vacuum fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

-- test the results of two VACUUM FULL actions
vacuum full fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

vacuum full fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

-- test the results of two VACUUM FULL ANALYZE actions
vacuum full analyze fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

vacuum full analyze fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

-- test the results of VACUUM FULL and VACUUM FULL ANALYZE
vacuum full fetch_stat_within_new_xid;
vacuum full analyze fetch_stat_within_new_xid;
select relname, relpages, reltuples, relfilenode > 0 from pg_class where relname='fetch_stat_within_new_xid';
          relname          | relpages | reltuples | ?column? 
---------------------------+----------+-----------+----------
 fetch_stat_within_new_xid |       16 |      1000 | t
(1 row)

set datestyle = 'iso, mdy';
create table string_eq_int(a int, b text, c varchar(3), d char(3), e char(10));
insert into string_eq_int values(generate_series(1, 1000), '100', '100', '100', '100');
analyze string_eq_int;
set explain_perf_mode = pretty;
explain select * from string_eq_int where b = 100;
 id |            operation             | E-rows | E-memory | E-width | E-costs 
----+----------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)     |   1000 |          |      27 | 35.96
  2 |    ->  Seq Scan on string_eq_int |   1000 | 1MB      |      27 | 2.25
(2 rows)

 Predicate Information (identified by plan id) 
-----------------------------------------------
   2 --Seq Scan on string_eq_int
         Filter: ((b)::bigint = 100)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.* 
(3 rows)

explain select * from string_eq_int where c = 100;
 id |            operation             | E-rows | E-memory | E-width | E-costs 
----+----------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)     |   1000 |          |      27 | 35.96
  2 |    ->  Seq Scan on string_eq_int |   1000 | 1MB      |      27 | 2.25
(2 rows)

 Predicate Information (identified by plan id) 
-----------------------------------------------
   2 --Seq Scan on string_eq_int
         Filter: ((c)::bigint = 100)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_int where d = 100;
 id |            operation             | E-rows | E-memory | E-width | E-costs 
----+----------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)     |   1000 |          |      27 | 35.96
  2 |    ->  Seq Scan on string_eq_int |   1000 | 1MB      |      27 | 2.25
(2 rows)

 Predicate Information (identified by plan id) 
-----------------------------------------------
   2 --Seq Scan on string_eq_int
         Filter: ((d)::bigint = 100)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_int where e = 100;
 id |            operation             | E-rows | E-memory | E-width | E-costs 
----+----------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)     |   1000 |          |      27 | 35.96
  2 |    ->  Seq Scan on string_eq_int |   1000 | 1MB      |      27 | 2.25
(2 rows)

 Predicate Information (identified by plan id) 
-----------------------------------------------
   2 --Seq Scan on string_eq_int
         Filter: ((e)::bigint = 100)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

create table string_eq_timestamp(a int, b text, c varchar(30), d char(30), e date);
insert into string_eq_timestamp values(generate_series(1, 500), '2012-12-16 10:11:15' , '2012-12-16 10:11:15', '2012-12-16 10:11:15', '2012-12-16');
insert into string_eq_timestamp values(generate_series(501, 1000), NULL, NULL, NULL, NULL);
analyze string_eq_timestamp;
explain select * from string_eq_timestamp where b = '2012-12-16 10:11:15'::timestamp;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |    500 |          |      83 | 19.31
  2 |    ->  Seq Scan on string_eq_timestamp |    500 | 1MB      |      83 | 2.25
(2 rows)

                              Predicate Information (identified by plan id)                              
---------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ((b)::timestamp without time zone = '2012-12-16 10:11:15'::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_timestamp where b <> '2012-12-16 10:11:15'::timestamp;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |      1 |          |      83 | 2.65
  2 |    ->  Seq Scan on string_eq_timestamp |      1 | 1MB      |      83 | 2.25
(2 rows)

                              Predicate Information (identified by plan id)                               
----------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ((b)::timestamp without time zone <> '2012-12-16 10:11:15'::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_timestamp where c = '2012-12-16 10:11:15'::timestamp;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |    500 |          |      83 | 19.31
  2 |    ->  Seq Scan on string_eq_timestamp |    500 | 1MB      |      83 | 2.25
(2 rows)

                              Predicate Information (identified by plan id)                              
---------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ((c)::timestamp without time zone = '2012-12-16 10:11:15'::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_timestamp where '2012-12-16 10:11:15'::timestamp <> c;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |      1 |          |      83 | 2.65
  2 |    ->  Seq Scan on string_eq_timestamp |      1 | 1MB      |      83 | 2.25
(2 rows)

                              Predicate Information (identified by plan id)                               
----------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ('2012-12-16 10:11:15'::timestamp without time zone <> (c)::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain select * from string_eq_timestamp where d = '2012-12-16 10:11:15'::timestamp;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |      5 |          |      83 | 2.65
  2 |    ->  Seq Scan on string_eq_timestamp |      5 | 1MB      |      83 | 2.25
(2 rows)

                              Predicate Information (identified by plan id)                              
---------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ((d)::timestamp without time zone = '2012-12-16 10:11:15'::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

set datestyle = 'Postgres, MDY';
explain select * from string_eq_timestamp where c = '2012-12-16 10:11:15'::timestamp;
 id |               operation                | E-rows | E-memory | E-width | E-costs 
----+----------------------------------------+--------+----------+---------+---------
  1 | ->  Streaming (type: GATHER)           |      1 |          |      83 | 2.65
  2 |    ->  Seq Scan on string_eq_timestamp |      1 | 1MB      |      83 | 2.25
(2 rows)

                                Predicate Information (identified by plan id)                                 
--------------------------------------------------------------------------------------------------------------
   2 --Seq Scan on string_eq_timestamp
         Filter: ((c)::timestamp without time zone = 'Sun Dec 16 10:11:15 2012'::timestamp without time zone)
(2 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

explain (costs off, nodes off)
select * from string_eq_timestamp where e=2012-12-16
union
select * from string_eq_timestamp where e=2012-12-16
union
select * from string_eq_timestamp where e=2012-12-16
union
select * from string_eq_timestamp where e=2012-12-16
union
select * from string_eq_timestamp where e=2012-12-16
union
select * from string_eq_timestamp where e=2012-12-16;
 id |                  operation                   
----+----------------------------------------------
  1 | ->  Streaming (type: GATHER)
  2 |    ->  HashAggregate
  3 |       ->  Append(4, 5, 6, 7, 8, 9)
  4 |          ->  Seq Scan on string_eq_timestamp
  5 |          ->  Seq Scan on string_eq_timestamp
  6 |          ->  Seq Scan on string_eq_timestamp
  7 |          ->  Seq Scan on string_eq_timestamp
  8 |          ->  Seq Scan on string_eq_timestamp
  9 |          ->  Seq Scan on string_eq_timestamp
(9 rows)

 Predicate Information (identified by plan id) 
-----------------------------------------------
   4 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
   5 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
   6 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
   7 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
   8 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
   9 --Seq Scan on string_eq_timestamp
         Filter: ((e)::text = '1984'::text)
(12 rows)

   ====== Query Summary =====   
--------------------------------
--?.*
--?.*
--?.*
(3 rows)

reset datestyle;
reset explain_perf_mode;
--test for ANALYZE for table in new nodegroup
create node group analyze_group with (datanode1, datanode2);
create table test_analyze_group(a int) distribute by hash(a) to group analyze_group;
insert into test_analyze_group values(1);
create node group "$a" with (datanode1, datanode2);
create table test6 (val int) distribute by hash(val) to group "$a";
insert into test6 values(1);
analyze test_analyze_group;
analyze test6;
set default_statistics_target=-2;
analyze test_analyze_group;
analyze test6;
reset default_statistics_target;
drop table test_analyze_group;
drop table test6;
drop node group analyze_group;
drop node group "$a";
-- test the results of ANALYZE replication temp table
create table replication_temp_test(id int);
insert into replication_temp_test select generate_series(1,100);
create temp table replication_temp_table distribute by replication as select * from replication_temp_test;
select count(*) from pg_stats where tablename = 'replication_temp_table';
 count 
-------
     0
(1 row)

analyze replication_temp_table;
select count(*) from pg_stats where tablename = 'replication_temp_table';
 count 
-------
     1
(1 row)

-- test the results of VACUUM ANALYZE temp table
create temp table temp_table(a int, b int);
insert into temp_table values(generate_series(1,100),generate_series(1,100));
select count(*) from pg_stats where tablename = 'temp_table';
 count 
-------
     0
(1 row)

vacuum analyze temp_table;
select count(*) from pg_stats where tablename = 'temp_table';
 count 
-------
     2
(1 row)

drop table temp_table;
set default_statistics_target = -10;
create temp table temp_table(a int, b int);
insert into temp_table values(generate_series(1,100),generate_series(1,100));
select count(*) from pg_stats where tablename = 'temp_table';
 count 
-------
     0
(1 row)

vacuum analyze temp_table;
select count(*) from pg_stats where tablename = 'temp_table';
 count 
-------
     2
(1 row)

reset default_statistics_target;
-- extrapolation stats
set enable_extrapolation_stats=on;
create table src_table(a int);
insert into src_table values(1);
-- all mcv
create table ex_table(a int, b date);
insert into ex_table select generate_series(1,20), '2018-03-06'::date+generate_series(1,20) from src_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
analyze ex_table;
explain select count(*) from ex_table where b='2018-03-25';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (b = 'Sun Mar 25 00:00:00 2018'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b='2019-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (b = 'Tue Mar 26 00:00:00 2019'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>='2019-03-26';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (b >= 'Tue Mar 26 00:00:00 2019'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>'2019-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (b > 'Tue Mar 26 00:00:00 2019'::timestamp without time zone)
(6 rows)

drop table ex_table;
-- all histogram
create table ex_table(a int, b date);
insert into ex_table select generate_series(1,1000), '2018-03-06'::date+generate_series(1,1000) from src_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
analyze ex_table;
explain select count(*) from ex_table where b='2018-03-25';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=8.23..8.58 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=8.23..8.58 rows=4 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=8.17..8.18 rows=4 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..8.16 rows=4 width=0)
                     Filter: (b = 'Sun Mar 25 00:00:00 2018'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b='2039-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=8.23..8.58 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=8.23..8.58 rows=4 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=8.17..8.18 rows=4 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..8.16 rows=4 width=0)
                     Filter: (b = 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>='2039-03-26';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=8.23..8.58 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=8.23..8.58 rows=4 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=8.17..8.18 rows=4 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..8.16 rows=4 width=0)
                     Filter: (b >= 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>'2039-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=8.23..8.58 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=8.23..8.58 rows=4 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=8.17..8.18 rows=4 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..8.16 rows=4 width=0)
                     Filter: (b > 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

drop table ex_table;
-- some mcv, some histogram
create table ex_table(a int, b date);
insert into ex_table select generate_series(1,20), '2018-03-06'::date+generate_series(1,20) from src_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select generate_series(1,1000), '2019-03-26'::date+generate_series(1,1000) from src_table;
analyze ex_table;
explain select count(*) from ex_table where b='2018-03-25';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=7.44..7.79 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=7.44..7.79 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=7.38..7.39 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..7.38 rows=16 width=0)
                     Filter: (b = 'Sun Mar 25 00:00:00 2018'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b='2039-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=7.44..7.79 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=7.44..7.79 rows=1 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=7.38..7.39 rows=1 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..7.38 rows=1 width=0)
                     Filter: (b = 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>='2039-03-26';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=7.44..7.79 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=7.44..7.79 rows=1 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=7.38..7.39 rows=1 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..7.38 rows=1 width=0)
                     Filter: (b >= 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where b>'2039-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=7.44..7.79 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=7.44..7.79 rows=1 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=7.38..7.39 rows=1 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..7.38 rows=1 width=0)
                     Filter: (b > 'Sat Mar 26 00:00:00 2039'::timestamp without time zone)
(6 rows)

drop table ex_table;
-- other data type
create table ex_table(a int, c timestamp, d timestamptz, e time, f smalldatetime);
insert into ex_table select generate_series(1,20), '2018-03-06'::date+generate_series(1,20),
 '2018-03-06'::date+generate_series(1,20), '2018-03-06'::date+generate_series(1,20),
 '2018-03-06'::date+generate_series(1,20) from src_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
insert into ex_table select * from ex_table;
analyze ex_table;
explain select count(*) from ex_table where c='2018-03-25';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (c = 'Sun Mar 25 00:00:00 2018'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where c='2019-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (c = 'Tue Mar 26 00:00:00 2019'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where c>'2019-03-26';
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (c > 'Tue Mar 26 00:00:00 2019'::timestamp without time zone)
(6 rows)

explain select count(*) from ex_table where d='2018-03-25';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (d = 'Sun Mar 25 00:00:00 2018 PDT'::timestamp with time zone)
(6 rows)

explain select count(*) from ex_table where d='2019-03-26';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (d = 'Tue Mar 26 00:00:00 2019 PDT'::timestamp with time zone)
(6 rows)

explain select count(*) from ex_table where d>'2019-03-26';
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (d > 'Tue Mar 26 00:00:00 2019 PDT'::timestamp with time zone)
(6 rows)

explain select count(*) from ex_table where e='00:00:00';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=10.17..10.53 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=10.17..10.53 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=10.11..10.12 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=2560 width=0)
                     Filter: (e = '00:00:00'::time without time zone)
(6 rows)

explain select count(*) from ex_table where e='08:00:00';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=10.17..10.53 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=10.17..10.53 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=10.11..10.12 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=2560 width=0)
                     Filter: (e = '08:00:00'::time without time zone)
(6 rows)

explain select count(*) from ex_table where e>'08:00:00';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=10.17..10.53 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=10.17..10.53 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=10.11..10.12 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=2560 width=0)
                     Filter: (e > '08:00:00'::time without time zone)
(6 rows)

explain select count(*) from ex_table where f='2018-03-25';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (f = 'Sun Mar 25 00:00:00 2018'::smalldatetime)
(6 rows)

explain select count(*) from ex_table where f='2019-03-26';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (f = 'Tue Mar 26 00:00:00 2019'::smalldatetime)
(6 rows)

explain select count(*) from ex_table where f>'2019-03-26';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=9.52..9.88 rows=1 width=8)
   ->  Streaming (type: GATHER)  (cost=9.52..9.88 rows=12 width=8)
         Node/s: All datanodes
         ->  Aggregate  (cost=9.46..9.47 rows=12 width=8)
               ->  Seq Scan on ex_table  (cost=0.00..9.43 rows=128 width=0)
                     Filter: (f > 'Tue Mar 26 00:00:00 2019'::smalldatetime)
(6 rows)

drop table ex_table;
create table test(a int,b text);
insert into test values(1,rpad('数据倾斜测试',800,'数据倾斜优化要优化'));
analyze test;
select * from pg_stats where tablename = 'test';
 schemaname | tablename | attname | inherited | null_frac | avg_width | n_distinct | n_dndistinct | most_common_vals | most_common_freqs | histogram_bounds | correlation | most_common_elems | most_common_elem_freqs | elem_count_histogram 
------------+-----------+---------+-----------+-----------+-----------+------------+--------------+------------------+-------------------+------------------+-------------+-------------------+------------------------+----------------------
 stats      | test      | a       | f         |         0 |         4 |         -1 |            1 |                  |                   |                  |             |                   |                        | 
(1 row)

drop table test;
reset enable_extrapolation_stats;
drop schema stats cascade;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table fetch_stat_within_new_xid
drop cascades to table string_eq_int
drop cascades to table string_eq_timestamp
drop cascades to table replication_temp_test
drop cascades to table src_table
