create table parallel_t1(a int);
insert into parallel_t1 values(generate_series(1,100000));
analyze parallel_t1;
--normal plan for seq scan
explain (costs off) select count(*) from parallel_t1;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on parallel_t1
(2 rows)

explain (costs off) select count(*) from parallel_t1 where a = 5000;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on parallel_t1
         Filter: (a = 5000)
(3 rows)

explain (costs off) select count(*) from parallel_t1 where a > 5000;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on parallel_t1
         Filter: (a > 5000)
(3 rows)

explain (costs off) select count(*) from parallel_t1 where a < 5000;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on parallel_t1
         Filter: (a < 5000)
(3 rows)

explain (costs off) select count(*) from parallel_t1 where a <> 5000;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on parallel_t1
         Filter: (a <> 5000)
(3 rows)

select count(*) from parallel_t1;
 count  
--------
 100000
(1 row)

select count(*) from parallel_t1 where a = 5000;
 count 
-------
     1
(1 row)

select count(*) from parallel_t1 where a > 5000;
 count 
-------
 95000
(1 row)

select count(*) from parallel_t1 where a < 5000;
 count 
-------
  4999
(1 row)

select count(*) from parallel_t1 where a <> 5000;
 count 
-------
 99999
(1 row)

--set parallel parameter
set force_parallel_mode=on;
set parallel_setup_cost=0;
set parallel_tuple_cost=0.000005;
set max_parallel_workers_per_gather=2;
set min_parallel_table_scan_size=0;
set parallel_leader_participation=on;
--parallel plan for seq scan
explain (costs off) select count(*) from parallel_t1;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Seq Scan on parallel_t1
(4 rows)

explain (costs off) select count(*) from parallel_t1 where a = 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Seq Scan on parallel_t1
               Filter: (a = 5000)
(5 rows)

explain (costs off) select count(*) from parallel_t1 where a > 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Seq Scan on parallel_t1
               Filter: (a > 5000)
(5 rows)

explain (costs off) select count(*) from parallel_t1 where a < 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Seq Scan on parallel_t1
               Filter: (a < 5000)
(5 rows)

explain (costs off) select count(*) from parallel_t1 where a <> 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Seq Scan on parallel_t1
               Filter: (a <> 5000)
(5 rows)

select count(*) from parallel_t1;
 count  
--------
 100000
(1 row)

select count(*) from parallel_t1 where a = 5000;
 count 
-------
     1
(1 row)

select count(*) from parallel_t1 where a > 5000;
 count 
-------
 95000
(1 row)

select count(*) from parallel_t1 where a < 5000;
 count 
-------
  4999
(1 row)

select count(*) from parallel_t1 where a <> 5000;
 count 
-------
 99999
(1 row)

explain (costs off,analyse on,verbose on) select count(*) from parallel_t1;
--?.*
--?.*
--? Aggregate (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 loops=1)
   Output: count(*)
--?   ->  Gather (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=100000 loops=1)
         Output: a
         Number of Workers: 2
--?         ->  Parallel Seq Scan on public.parallel_t1 (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=33333 loops=3)
               Output: a
--?               Worker 0: actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]*  rows=[0-9]* loops=1
--?               Worker 1: actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]*  rows=[0-9]* loops=1
--? Total runtime: [0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* ms
(10 rows)

--clean up
reset force_parallel_mode;
reset parallel_setup_cost;
reset parallel_tuple_cost;
reset max_parallel_workers_per_gather;
reset min_parallel_table_scan_size;
reset parallel_leader_participation;
--test parallel index scan
create table parallel_t2(a int, b int);
insert into parallel_t2 values(generate_series(1,100000), generate_series(1,100000));
create index t2_idx on parallel_t2 using btree(a);
analyze parallel_t2;
--normal plan for merge join
set enable_hashjoin to off;
set enable_nestloop to off;
set enable_indexscan to off;
explain (costs off) select count(*) from parallel_t1,parallel_t2 where parallel_t1.a=parallel_t2.a;
                     QUERY PLAN                      
-----------------------------------------------------
 Aggregate
   ->  Merge Join
         Merge Cond: (parallel_t1.a = parallel_t2.a)
         ->  Sort
               Sort Key: parallel_t1.a
               ->  Seq Scan on parallel_t1
         ->  Sort
               Sort Key: parallel_t2.a
               ->  Seq Scan on parallel_t2
(9 rows)

select count(*) from parallel_t1,parallel_t2 where parallel_t1.a=parallel_t2.a;
 count  
--------
 100000
(1 row)

reset enable_hashjoin;
reset enable_nestloop;
reset enable_indexscan;
--set index scan parameter
set enable_seqscan to off;
set enable_bitmapscan to off;
--normal plan for index scan
explain (costs off) select count(b) from parallel_t2 where a > 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Index Scan using t2_idx on parallel_t2
         Index Cond: (a > 5000)
(3 rows)

explain (costs off) select count(b) from parallel_t2 where a < 5000;
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   ->  Index Scan using t2_idx on parallel_t2
         Index Cond: (a < 5000)
(3 rows)

select count(b) from parallel_t2 where a > 5000;
 count 
-------
 95000
(1 row)

select count(b) from parallel_t2 where a < 5000;
 count 
-------
  4999
(1 row)

--normal plan for index only scan
explain (costs off) select count(*) from parallel_t2;
                    QUERY PLAN                     
---------------------------------------------------
 Aggregate
   ->  Index Only Scan using t2_idx on parallel_t2
(2 rows)

explain (costs off) select count(*) from parallel_t2 where a > 5000;
                    QUERY PLAN                     
---------------------------------------------------
 Aggregate
   ->  Index Only Scan using t2_idx on parallel_t2
         Index Cond: (a > 5000)
(3 rows)

explain (costs off) select count(*) from parallel_t2 where a < 5000;
                    QUERY PLAN                     
---------------------------------------------------
 Aggregate
   ->  Index Only Scan using t2_idx on parallel_t2
         Index Cond: (a < 5000)
(3 rows)

select count(*) from parallel_t2;
 count  
--------
 100000
(1 row)

select count(*) from parallel_t2 where a > 5000;
 count 
-------
 95000
(1 row)

select count(*) from parallel_t2 where a < 5000;
 count 
-------
  4999
(1 row)

--set parallel parameter
set force_parallel_mode=on;
set parallel_setup_cost=0;
set parallel_tuple_cost=0.000005;
set max_parallel_workers_per_gather=2;
set min_parallel_table_scan_size=0;
set min_parallel_index_scan_size=0;
set parallel_leader_participation=on;
--parallel plan for index scan
explain (costs off) select count(b) from parallel_t2 where a > 5000;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Index Scan using t2_idx on parallel_t2
               Index Cond: (a > 5000)
(5 rows)

explain (costs off) select count(b) from parallel_t2 where a < 5000;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Index Scan using t2_idx on parallel_t2
               Index Cond: (a < 5000)
(5 rows)

select count(b) from parallel_t2 where a > 5000;
 count 
-------
 95000
(1 row)

select count(b) from parallel_t2 where a < 5000;
 count 
-------
  4999
(1 row)

--parallel plan for index only scan
explain (costs off) select count(a) from parallel_t2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Index Only Scan using t2_idx on parallel_t2
(4 rows)

explain (costs off) select count(a) from parallel_t2 where a > 5000;
                            QUERY PLAN                            
------------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Index Only Scan using t2_idx on parallel_t2
               Index Cond: (a > 5000)
(5 rows)

explain (costs off) select count(a) from parallel_t2 where a < 5000;
                            QUERY PLAN                            
------------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Parallel Index Only Scan using t2_idx on parallel_t2
               Index Cond: (a < 5000)
(5 rows)

select count(a) from parallel_t2;
 count  
--------
 100000
(1 row)

select count(a) from parallel_t2 where a > 5000;
 count 
-------
 95000
(1 row)

select count(a) from parallel_t2 where a < 5000;
 count 
-------
  4999
(1 row)

--set parallel_workers for parallel_t2
alter table parallel_t2 set (parallel_workers = 1);
--parallel plan for index scan
explain (costs off) select count(b) from parallel_t2 where a > 5000;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 1
         ->  Parallel Index Scan using t2_idx on parallel_t2
               Index Cond: (a > 5000)
(5 rows)

explain (costs off) select count(b) from parallel_t2 where a < 5000;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 1
         ->  Parallel Index Scan using t2_idx on parallel_t2
               Index Cond: (a < 5000)
(5 rows)

select count(b) from parallel_t2 where a > 5000;
 count 
-------
 95000
(1 row)

select count(b) from parallel_t2 where a < 5000;
 count 
-------
  4999
(1 row)

--parallel plan for merge join
reset enable_seqscan;
reset enable_bitmapscan;
set enable_hashjoin to off;
set enable_nestloop to off;
set enable_indexscan to off;
explain (costs off) select count(*) from parallel_t1,parallel_t2 where parallel_t1.a=parallel_t2.a;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   ->  Gather
         Number of Workers: 2
         ->  Merge Join
               Merge Cond: (parallel_t1.a = parallel_t2.a)
               ->  Sort
                     Sort Key: parallel_t1.a
                     ->  Parallel Seq Scan on parallel_t1
               ->  Sort
                     Sort Key: parallel_t2.a
                     ->  Seq Scan on parallel_t2
(11 rows)

select count(*) from parallel_t1,parallel_t2 where parallel_t1.a=parallel_t2.a;
 count  
--------
 100000
(1 row)

reset enable_hashjoin;
reset enable_nestloop;
reset enable_indexscan;
--clean up
drop table parallel_t1;
drop table parallel_t2;
reset enable_seqscan;
reset enable_bitmapscan;
reset force_parallel_mode;
reset parallel_setup_cost;
reset parallel_tuple_cost;
reset max_parallel_workers_per_gather;
reset min_parallel_table_scan_size;
reset parallel_leader_participation;
reset min_parallel_index_scan_size;
-- nestloop
set enable_hashjoin=off;
set enable_mergejoin=off;
explain (costs off, analyse on) select schemaname, tablename from pg_tables where tablename like 'sql%' order by tablename;
--?.*
--?.*
--? Nested Loop Left Join (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=7 loops=1)
   Join Filter: (n.oid = c.relnamespace)
--?   Rows Removed by Join Filter: [0-9]*
--?   ->  Index Scan using pg_class_relname_nsp_index on pg_class c (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=7 loops=1)
         Index Cond: ((relname >= 'sql'::name) AND (relname < 'sqm'::name))
         Filter: ((relname ~~ 'sql%'::text) AND (relkind = 'r'::"char"))
--?   ->  Seq Scan on pg_namespace n (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=10 loops=7)
--? Total runtime: [0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* ms
(8 rows)

--set parallel parameter
set force_parallel_mode=on;
set parallel_setup_cost=0;
set parallel_tuple_cost=0.000005;
set max_parallel_workers_per_gather=2;
set min_parallel_table_scan_size=0;
set parallel_leader_participation=on;
-- nestloop
explain (costs off, analyse on) select schemaname, tablename from pg_tables where tablename like 'sql%' order by tablename;
--?.*
--?.*
--? Nested Loop Left Join (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=7 loops=1)
   Join Filter: (n.oid = c.relnamespace)
--?   Rows Removed by Join Filter: [0-9]*
--?   ->  Index Scan using pg_class_relname_nsp_index on pg_class c (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=7 loops=1)
         Index Cond: ((relname >= 'sql'::name) AND (relname < 'sqm'::name))
         Filter: ((relname ~~ 'sql%'::text) AND (relkind = 'r'::"char"))
--?   ->  Gather (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=10 loops=7)
         Number of Workers: 1
--?         ->  Parallel Seq Scan on pg_namespace n (actual time=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=5 loops=14)
--? Total runtime: [0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* ms
(10 rows)

--clean up
reset force_parallel_mode;
reset parallel_setup_cost;
reset parallel_tuple_cost;
reset max_parallel_workers_per_gather;
reset min_parallel_table_scan_size;
reset parallel_leader_participation;
reset enable_hashjoin;
reset enable_mergejoin;