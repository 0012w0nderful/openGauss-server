CREATE SCHEMA gtt_function;
set search_path=gtt_function,sys;
create global temp table gtt1(a int primary key, b text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt1_pkey" for table "gtt1"
create global temp table gtt_test_rename(a int primary key, b text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt_test_rename_pkey" for table "gtt_test_rename"
create global temp table gtt2(a int primary key, b text) on commit delete rows;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt2_pkey" for table "gtt2"
create global temp table gtt3(a int primary key, b text) on commit PRESERVE rows;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt3_pkey" for table "gtt3"
create global temp table tmp_t0(c0 tsvector,c1 varchar(100));
create table tbl_inherits_parent(
a int not null,
b varchar(32) not null default 'Got u',
c int check (c > 0),
d date not null
);
create global temp table tbl_inherits_parent_global_temp(
a int not null,
b varchar(32) not null default 'Got u',
c int check (c > 0),
d date not null
)on commit delete rows;
CREATE global temp TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "products_pkey" for table "products"
create global temp table gtt6(n int) with (on_commit_delete_rows='true');
begin;
insert into gtt6 values (9);
-- 1 row
select * from gtt6;
 n 
---
 9
(1 row)

commit;
-- 0 row
select * from gtt6;
 n 
---
(0 rows)

-- SUCCESS
create index CONCURRENTLY idx_gtt1 on gtt1 (b);
-- ERROR
cluster gtt1 using gtt1_pkey;
-- ERROR
create table gtt1(a int primary key, b text) on commit delete rows;
ERROR:  ON COMMIT can only be used on temporary tables
-- ERROR
alter table gtt1 SET TABLESPACE pg_default;
ERROR:  not support alter table set tablespace on global temp table.
-- ERROR
alter table gtt1 set ( on_commit_delete_rows='true');
ERROR:  table cannot add or modify on commit parameter by ALTER TABLE command.
-- ERROR
create table gtt1(a int primary key, b text) with(on_commit_delete_rows=true);
ERROR:  The parameter on_commit_delete_rows is exclusive to the global temp table, which cannot be specified by a regular table
-- ERROR
create or replace global temp view gtt_v as select 5;
ERROR:  views cannot be global temp because they do not have storage
create table foo();
ERROR:  must have at least one column
-- ERROR
alter table foo set (on_commit_delete_rows='true');
ERROR:  relation "foo" does not exist
-- ok
--CREATE global temp TABLE measurement (
--    logdate         date not null,
--    peaktemp        int,
--    unitsales       int
--) PARTITION BY RANGE (logdate);
--ok
--CREATE global temp TABLE p_table01 (
--id        bigserial NOT NULL,
--cre_time  timestamp without time zone,
--note      varchar(30)
--) PARTITION BY RANGE (cre_time)
--WITH (
--OIDS = FALSE
--)on commit delete rows;
 
--CREATE global temp TABLE p_table01_2018
--PARTITION OF p_table01
--FOR VALUES FROM ('2018-01-01 00:00:00') TO ('2019-01-01 00:00:00') on commit delete rows;
 
--CREATE global temp TABLE p_table01_2017
--PARTITION OF p_table01
--FOR VALUES FROM ('2017-01-01 00:00:00') TO ('2018-01-01 00:00:00') on commit delete rows;
--begin;
--insert into p_table01 values(1,'2018-01-02 00:00:00','test1');
--insert into p_table01 values(1,'2018-01-02 00:00:00','test2');
--select count(*) from p_table01;
--commit;
--select count(*) from p_table01;
--ok
--CREATE global temp TABLE p_table02 (
--id        bigserial NOT NULL,
--cre_time  timestamp without time zone,
--note      varchar(30)
--) PARTITION BY RANGE (cre_time)
--WITH (
--OIDS = FALSE
--)
--on commit PRESERVE rows;
--CREATE global temp TABLE p_table02_2018
--PARTITION OF p_table02
--FOR VALUES FROM ('2018-01-01 00:00:00') TO ('2019-01-01 00:00:00');
--CREATE global temp TABLE p_table02_2017
--PARTITION OF p_table02
--FOR VALUES FROM ('2017-01-01 00:00:00') TO ('2018-01-01 00:00:00');
-- ERROR
--create global temp table tbl_inherits_partition() inherits (tbl_inherits_parent);
-- ok
--create global temp table tbl_inherits_partition() inherits (tbl_inherits_parent_global_temp) on commit delete rows;
select relname ,relkind, relpersistence, reloptions from pg_class where relname like 'p_table0%' or  relname like 'tbl_inherits%' order by relname;
             relname             | relkind | relpersistence |                         reloptions                          
---------------------------------+---------+----------------+-------------------------------------------------------------
 tbl_inherits_parent             | r       | p              | {orientation=row,compression=no}
 tbl_inherits_parent_global_temp | r       | g              | {orientation=row,compression=no,on_commit_delete_rows=true}
(2 rows)

-- ERROR
create global temp table gtt3(a int primary key, b text) on commit drop;
ERROR:  ON COMMIT only support PRESERVE ROWS or DELETE ROWS option
-- ERROR
create global temp table gtt4(a int primary key, b text) with(on_commit_delete_rows=true) on commit delete rows;
ERROR:  could not create global temporary table with on commit and with clause at same time
-- ok
create global temp table gtt5(a int primary key, b text) with(on_commit_delete_rows=true);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt5_pkey" for table "gtt5"
--ok
alter table gtt_test_rename rename to gtt_test_new;
-- ok
ALTER TABLE gtt_test_new ADD COLUMN address varchar(30);
-- ERROR
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer REFERENCES products (product_no),
    quantity integer
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "orders_pkey" for table "orders"
ERROR:  constraints on permanent tables may reference only permanent tables
-- ok
CREATE global temp TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer REFERENCES products (product_no),
    quantity integer
)on commit delete rows;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "orders_pkey" for table "orders"
--ERROR
insert into orders values(1,1,1);
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_product_no_fkey"
DETAIL:  Key (product_no)=(1) is not present in table "products".
--ok
insert into products values(1,'test',1.0);
begin;
insert into orders values(1,1,1);
commit;
select count(*) from products;
 count 
-------
     1
(1 row)

select count(*) from orders;
 count 
-------
     0
(1 row)

-- ok
CREATE GLOBAL TEMPORARY TABLE mytable (
  id SERIAL PRIMARY KEY,
  data text
) on commit preserve rows;
NOTICE:  CREATE TABLE will create implicit sequence "mytable_id_seq" for serial column "mytable.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "mytable_pkey" for table "mytable"
-- ok
--create global temp table gtt_seq(id int GENERATED ALWAYS AS IDENTITY (START WITH 2) primary key, a int)  on commit PRESERVE rows;
--insert into gtt_seq (a) values(1);
--insert into gtt_seq (a) values(2);
--select * from gtt_seq order by id;
--truncate gtt_seq;
--select * from gtt_seq order by id;
--insert into gtt_seq (a) values(3);
--select * from gtt_seq order by id;
--ERROR
--CREATE MATERIALIZED VIEW mv_gtt1 as select * from gtt1;
-- ok
create index idx_gtt1_1 on gtt1 using hash (a);
ERROR:  access method "hash" does not support row store
create index idx_tmp_t0_1 on tmp_t0 using gin (c0);
create index idx_tmp_t0_2 on tmp_t0 using gist (c0);
--ok
create global temp table gt (a SERIAL,b int);
NOTICE:  CREATE TABLE will create implicit sequence "gt_a_seq" for serial column "gt.a"
begin;
set transaction_read_only = true;
insert into gt (b) values(1);
select * from gt;
 a | b 
---+---
 1 | 1
(1 row)

commit;
--create sequence seq_1;
CREATE GLOBAL TEMPORARY TABLE gtt_s_1(c1 int PRIMARY KEY) ON COMMIT DELETE ROWS;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt_s_1_pkey" for table "gtt_s_1"
CREATE GLOBAL TEMPORARY TABLE gtt_s_2(c1 int PRIMARY KEY) ON COMMIT PRESERVE ROWS;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtt_s_2_pkey" for table "gtt_s_2"
--alter table gtt_s_1 add c2 int default nextval('seq_1');
--alter table gtt_s_2 add c2 int default nextval('seq_1');
begin;
insert into gtt_s_1 (c1)values(1);
insert into gtt_s_2 (c1)values(1);
insert into gtt_s_1 (c1)values(2);
insert into gtt_s_2 (c1)values(2);
select * from gtt_s_1 order by c1;
 c1 
----
  1
  2
(2 rows)

commit;
select * from gtt_s_1 order by c1;
 c1 
----
(0 rows)

select * from gtt_s_2 order by c1;
 c1 
----
  1
  2
(2 rows)

--ok
create global temp table gt1(a int);
insert into gt1 values(generate_series(1,100000));
create index idx_gt1_1 on gt1 (a);
create index idx_gt1_2 on gt1((a + 1));
create index idx_gt1_3 on gt1((a*10),(a+a),(a-1));
explain (costs off) select * from gt1 where a=1;
              QUERY PLAN              
--------------------------------------
 Bitmap Heap Scan on gt1
   Recheck Cond: (a = 1)
   ->  Bitmap Index Scan on idx_gt1_1
         Index Cond: (a = 1)
(4 rows)

explain (costs off) select * from gt1 where a=200000;
              QUERY PLAN              
--------------------------------------
 Bitmap Heap Scan on gt1
   Recheck Cond: (a = 200000)
   ->  Bitmap Index Scan on idx_gt1_1
         Index Cond: (a = 200000)
(4 rows)

explain (costs off) select * from gt1 where a*10=300;
              QUERY PLAN              
--------------------------------------
 Bitmap Heap Scan on gt1
   Recheck Cond: ((a * 10) = 300)
   ->  Bitmap Index Scan on idx_gt1_3
         Index Cond: ((a * 10) = 300)
(4 rows)

explain (costs off) select * from gt1 where a*10=3;
              QUERY PLAN              
--------------------------------------
 Bitmap Heap Scan on gt1
   Recheck Cond: ((a * 10) = 3)
   ->  Bitmap Index Scan on idx_gt1_3
         Index Cond: ((a * 10) = 3)
(4 rows)

analyze gt1;
explain (costs off) select * from gt1 where a=1;
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Index Only Scan using idx_gt1_1 on gt1
   Index Cond: (a = 1)
(3 rows)

explain (costs off) select * from gt1 where a=200000;
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Index Only Scan using idx_gt1_1 on gt1
   Index Cond: (a = 200000)
(3 rows)

explain (costs off) select * from gt1 where a*10=300;
            QUERY PLAN             
-----------------------------------
 [Bypass]
 Index Scan using idx_gt1_3 on gt1
   Index Cond: ((a * 10) = 300)
(3 rows)

explain (costs off) select * from gt1 where a*10=3;
            QUERY PLAN             
-----------------------------------
 [Bypass]
 Index Scan using idx_gt1_3 on gt1
   Index Cond: ((a * 10) = 3)
(3 rows)

--ok
create global temp table gtt_test1(c1 int) with(on_commit_delete_rows='1');
create global temp table gtt_test2(c1 int) with(on_commit_delete_rows='0');
create global temp table gtt_test3(c1 int) with(on_commit_delete_rows='t');
create global temp table gtt_test4(c1 int) with(on_commit_delete_rows='f');
create global temp table gtt_test5(c1 int) with(on_commit_delete_rows='yes');
create global temp table gtt_test6(c1 int) with(on_commit_delete_rows='no');
create global temp table gtt_test7(c1 int) with(on_commit_delete_rows='y');
create global temp table gtt_test8(c1 int) with(on_commit_delete_rows='n');
--error
create global temp table gtt_test9(c1 int) with(on_commit_delete_rows='tr');
create global temp table gtt_test10(c1 int) with(on_commit_delete_rows='ye');
reset search_path;
drop schema gtt_function cascade;
NOTICE:  drop cascades to 26 other objects
DETAIL:  drop cascades to table gtt_function.gtt1
drop cascades to table gtt_function.gtt_test_new
drop cascades to table gtt_function.gtt2
drop cascades to table gtt_function.gtt3
drop cascades to table gtt_function.tmp_t0
drop cascades to table gtt_function.tbl_inherits_parent
drop cascades to table gtt_function.tbl_inherits_parent_global_temp
drop cascades to table gtt_function.products
drop cascades to table gtt_function.gtt6
drop cascades to table gtt_function.gtt5
drop cascades to table gtt_function.orders
drop cascades to table gtt_function.mytable
drop cascades to table gtt_function.gt
drop cascades to table gtt_function.gtt_s_1
drop cascades to table gtt_function.gtt_s_2
drop cascades to table gtt_function.gt1
drop cascades to table gtt_function.gtt_test1
drop cascades to table gtt_function.gtt_test2
drop cascades to table gtt_function.gtt_test3
drop cascades to table gtt_function.gtt_test4
drop cascades to table gtt_function.gtt_test5
drop cascades to table gtt_function.gtt_test6
drop cascades to table gtt_function.gtt_test7
drop cascades to table gtt_function.gtt_test8
drop cascades to table gtt_function.gtt_test9
drop cascades to table gtt_function.gtt_test10
