--
-- DEPENDENCIES
--
CREATE USER regression_user PASSWORD 'ttest@123';
CREATE USER regression_user2 PASSWORD 'ttest@123';
CREATE USER regression_user3 PASSWORD 'ttest@123';
CREATE GROUP regression_group PASSWORD 'ttest@123';
CREATE TABLE deptest (f1 int primary key, f2 text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "deptest_pkey" for table "deptest"
GRANT SELECT ON TABLE deptest TO GROUP regression_group;
GRANT ALL ON TABLE deptest TO regression_user, regression_user2;
-- can't drop neither because they have privileges somewhere
DROP USER regression_user CASCADE;
DROP GROUP regression_group CASCADE;
ERROR:  syntax error at or near "CASCADE"
LINE 1: DROP GROUP regression_group CASCADE;
                                    ^
-- if we revoke the privileges we can drop the group
REVOKE SELECT ON deptest FROM GROUP regression_group;
DROP GROUP regression_group CASCADE;;
ERROR:  syntax error at or near "CASCADE"
LINE 1: DROP GROUP regression_group CASCADE;
                                    ^
-- can't drop the user if we revoke the privileges partially
REVOKE SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES ON deptest FROM regression_user;
ERROR:  role "regression_user" does not exist
DROP USER regression_user CASCADE;;
ERROR:  role "regression_user" does not exist
-- now we are OK to drop him
REVOKE TRIGGER ON deptest FROM regression_user;
ERROR:  role "regression_user" does not exist
DROP USER regression_user CASCADE;;
ERROR:  role "regression_user" does not exist
-- we are OK too if we drop the privileges all at once
REVOKE ALL ON deptest FROM regression_user2;
DROP USER regression_user2 CASCADE;
-- can't drop the owner of an object
-- the error message detail here would include a pg_toast_nnn name that
-- is not constant, so suppress it
\set VERBOSITY terse
ALTER TABLE deptest OWNER TO regression_user3;
DROP USER regression_user3 CASCADE;
\set VERBOSITY default
-- if we drop the object, we can drop the user too
DROP TABLE deptest;
ERROR:  table "deptest" does not exist
DROP USER regression_user3;
ERROR:  role "regression_user3" does not exist
-- Test DROP OWNED
CREATE USER regression_user0 PASSWORD 'ttest@123';
CREATE USER regression_user1 PASSWORD 'ttest@123';
CREATE USER regression_user2 PASSWORD 'ttest@123';
SET SESSION AUTHORIZATION regression_user0 PASSWORD 'ttest@123';
-- permission denied
DROP OWNED BY regression_user1 CASCADE;
ERROR:  Permission denied to drop objects.
DROP OWNED BY regression_user0, regression_user2 CASCADE;
ERROR:  Permission denied to drop objects.
REASSIGN OWNED BY regression_user0 TO regression_user1;
ERROR:  Permission denied to reassign objects.
REASSIGN OWNED BY regression_user1 TO regression_user0;
ERROR:  Permission denied to reassign objects.
CREATE TABLE deptest1 (f1 int unique);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "deptest1_f1_key" for table "deptest1"
GRANT USAGE ON schema regression_user0 TO regression_user1;
GRANT ALL ON deptest1 TO regression_user1 WITH GRANT OPTION;
SET SESSION AUTHORIZATION regression_user1 PASSWORD 'ttest@123';
CREATE TABLE deptest (a int primary key, b text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "deptest_pkey" for table "deptest"
GRANT ALL ON regression_user0.deptest1 TO regression_user2;
RESET SESSION AUTHORIZATION;
\z regression_user0.deptest1
                                                 Access privileges
      Schema      |   Name   | Type  |                Access privileges                 | Column access privileges 
------------------+----------+-------+--------------------------------------------------+--------------------------
 regression_user0 | deptest1 | table | regression_user0=arwdDxt/regression_user0       +| 
                  |          |       | regression_user1=a*r*w*d*D*x*t*/regression_user0+| 
                  |          |       | regression_user2=arwdDxt/regression_user1        | 
(1 row)

DROP OWNED BY regression_user1;
-- all grants revoked
\z regression_user0.deptest1
                                             Access privileges
      Schema      |   Name   | Type  |             Access privileges             | Column access privileges 
------------------+----------+-------+-------------------------------------------+--------------------------
 regression_user0 | deptest1 | table | regression_user0=arwdDxt/regression_user0 | 
(1 row)

-- table was dropped
\d deptest
-- Test REASSIGN OWNED
DROP USER regression_user1;
CREATE USER regression_user1 PASSWORD 'ttest@123';
GRANT ALL ON regression_user0.deptest1 TO regression_user1;
SET SESSION AUTHORIZATION regression_user1 PASSWORD 'ttest@123';
CREATE TABLE deptest (a int primary key, b text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "deptest_pkey" for table "deptest"
CREATE TABLE deptest2 (f1 int);
-- make a serial column the hard way
CREATE SEQUENCE ss1;
ALTER TABLE deptest2 ALTER f1 SET DEFAULT nextval('ss1');
ALTER SEQUENCE ss1 OWNED BY deptest2.f1;
RESET SESSION AUTHORIZATION;
REASSIGN OWNED BY regression_user1 TO regression_user2;
\dt regression_user1.deptest
                                    List of relations
      Schema      |  Name   | Type  |      Owner       |             Storage              
------------------+---------+-------+------------------+----------------------------------
 regression_user1 | deptest | table | regression_user2 | {orientation=row,compression=no}
(1 row)

-- doesn't work: grant still exists
DROP USER regression_user1 CASCADE;
DROP OWNED BY regression_user1;
ERROR:  role "regression_user1" does not exist
DROP USER regression_user1;
ERROR:  role "regression_user1" does not exist
\set VERBOSITY terse
DROP USER regression_user2 CASCADE;
DROP OWNED BY regression_user2, regression_user0;
ERROR:  role "regression_user2" does not exist
DROP USER regression_user2;
ERROR:  role "regression_user2" does not exist
DROP USER regression_user0;
ERROR:  cannot drop schema regression_user0 because other objects depend on it
